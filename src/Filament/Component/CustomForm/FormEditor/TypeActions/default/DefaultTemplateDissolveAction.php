<?phpnamespace Ffhs\FilamentPackageFfhsCustomForms\Filament\Component\CustomForm\FormEditor\TypeActions\default;use Ffhs\FilamentPackageFfhsCustomForms\Helping\CustomForm\EditHelper\EditCustomFormCloneHelper;use Ffhs\FilamentPackageFfhsCustomForms\Helping\CustomForm\EditHelper\EditCustomFormHelper;use Ffhs\FilamentPackageFfhsCustomForms\Helping\CustomForm\EditHelper\EditCustomFormLoadHelper;use Ffhs\FilamentPackageFfhsCustomForms\Models\CustomForm;use Filament\Forms\Components\Actions\Action;use Filament\Forms\Components\Component;use Filament\Forms\Get;use Filament\Forms\Set;use Filament\Support\Colors\Color;class DefaultTemplateDissolveAction extends Action{    protected function setUp(): void {        parent::setUp();        $this->iconButton();        $this->closeModalByClickingAway(false)            ->icon('carbon-sync-settings')            ->color(Color::hex("#de9310"))            ->label("Auflösen")//ToDo Translate            ->requiresConfirmation()            ->modalHeading(function (array $state, array $arguments) {                $data = $state[$arguments["item"]];                $template = CustomForm::cached($data["template_id"]);                $name = $template->short_title;                return "Möchten sie Wirklich das Template '" . $name . "'  auflösen?"; //ToDo Translate            })            ->action($this->dissolve(...));    }    protected function dissolve(CustomForm $record, Get $get, Set $set, array $state, array $arguments, Component $component): void    {        $key = $arguments["item"];        $templateID = $state[$key]["template_id"];        $template = CustomForm::cached($templateID);        $this->dissolveFields($set, $key, $state, $template, $component, $record);        $this->dissolveRules($set, $template, $record); //ToDo does not work    }    protected function dissolveFields(Set $set, string $templateFieldKey, array $state, CustomForm $template, Component $component, CustomForm $target): void    {        //Deleting template field        $customFields = EditCustomFormHelper::removeField($templateFieldKey, $state);        //Get Template Fields        $templateFormData = EditCustomFormLoadHelper::load($template);        $templateFields = $templateFormData['custom_fields'];        $clearedTemplateFields = [];        //CustomFieldAnswerer CustomField id changing is handelt in TemplateFieldType.class on afterEditFieldDelete()        foreach ($templateFields as $key => $field)            $clearedTemplateFields[$key] = EditCustomFormCloneHelper::cloneField($field, $target, true);        //Place the new fields there were the template was        $templatePos = $state[$templateFieldKey]["form_position"];        $customFields = EditCustomFormHelper::addMultipleFields($clearedTemplateFields, $templatePos ,$customFields);        //Set the fields back in the repeater        $set($component->getStatePath(), $customFields, true);    }    protected function dissolveRules(Set $set, CustomForm $template,  CustomForm $target): void    {        $rules = EditCustomFormLoadHelper::loadRules($template);        foreach ($rules as $key => $rule)            $rules[$key] = EditCustomFormCloneHelper::cloneRule($rule, $target);        $set("../rules", $rules);    }}