<?phpnamespace Ffhs\FilamentPackageFfhsCustomForms\Filament\Component\CustomForm\FormEditor\TypeActions\default;use Ffhs\FilamentPackageFfhsCustomForms\CustomField\CustomFieldType\LayoutType\Types\GroupType;use Ffhs\FilamentPackageFfhsCustomForms\Helping\CustomForm\EditHelper\EditCustomFormCloneHelper;use Ffhs\FilamentPackageFfhsCustomForms\Helping\CustomForm\EditHelper\EditCustomFormHelper;use Ffhs\FilamentPackageFfhsCustomForms\Helping\CustomForm\EditHelper\EditCustomFormLoadHelper;use Ffhs\FilamentPackageFfhsCustomForms\Models\CustomForm;use Filament\Forms\Components\Actions\Action;use Filament\Forms\Components\Component;use Filament\Forms\Get;use Filament\Forms\Set;use Filament\Support\Colors\Color;class DefaultTemplateDissolveAction extends Action{    protected function setUp(): void {        parent::setUp();        $this->iconButton();        $this->closeModalByClickingAway(false)            ->icon('carbon-sync-settings')            ->color(Color::hex("#de9310"))            ->label("Auflösen")//ToDo Translate            ->requiresConfirmation()            ->modalHeading(function (array $state, array $arguments) {                $data = $state[$arguments["item"]];                $template = CustomForm::cached($data["template_id"]);                $name = $template->short_title;                return "Möchten sie Wirklich das Template '" . $name . "'  auflösen?"; //ToDo Translate            })            ->action($this->dissolve(...));    }    protected function dissolve(CustomForm $record, Get $get, Set $set, array $state, array $arguments, Component $component): void    {        $key = $arguments["item"];        $templateID = $state[$key]["template_id"];        $template = CustomForm::cached($templateID);        $this->dissolveFields($set, $key, $state, $template, $component, $record);        $this->dissolveRules($set,$get, $template, $record);    }    protected function dissolveFields(Set $set, string $templateFieldKey, array $state, CustomForm $template, Component $component, CustomForm $target): void    {        $customFields = $state;        $templatePos = $state[$templateFieldKey]["form_position"];        //Get Template Fields        $templateFormData = EditCustomFormLoadHelper::load($template);        $templateFields = $templateFormData['custom_fields'];        $clearedTemplateFields = [];        //CustomFieldAnswerer CustomField id changing is handelt in TemplateFieldType.class on afterEditFieldDelete()        foreach ($templateFields as $key => $field){            $clearedTemplateFields[$key] = EditCustomFormCloneHelper::cloneField($field, $target, true);        }        //Put template fields in an group        $clearedTemplateFields = $this->putFieldsInGroup($clearedTemplateFields, $target);        //Place the new fields there were the template was        $customFields = EditCustomFormHelper::addMultipleFields(            $clearedTemplateFields,            $templatePos ,            $customFields        );        //Deleting template field        $customFields = EditCustomFormHelper::removeField($templateFieldKey, $customFields);        //Set the fields back in the repeater        $set($component->getStatePath(), $customFields, true);    }    protected function putFieldsInGroup(array $clearedTemplateFields, CustomForm $target): array {        //Move fields in group        foreach ($clearedTemplateFields as $key => $field) {            $clearedTemplateFields[$key]["form_position"] = $field["form_position"] + 1;            if (!empty($clearedTemplateFields[$key]["layout_end_position"])) {                $clearedTemplateFields[$key]["layout_end_position"] = $field["layout_end_position"] + 1;            }        }        //Add gorup field        $id = uniqid();        $clearedTemplateFields[$id] = [            "form_position" => 1,            "layout_end_position" => sizeof($clearedTemplateFields) + 1,            "is_active" => true,            "identifier" => $id,            "custom_form_id" => $target->id,            "options" => array_merge(                GroupType::make()->getDefaultTypeOptionValues(),                [                    "column_span" => 10,                    "columns" => config("ffhs_custom_forms.default_column_count"),                ]            ),            "type" => GroupType::identifier(),        ];        return $clearedTemplateFields;    }    protected function dissolveRules(Set $set,Get $get, CustomForm $template, CustomForm $target): void    {        $rules = EditCustomFormLoadHelper::loadRules($template);        foreach ($rules as $key => $rule) {            $rules[$key] = EditCustomFormCloneHelper::cloneRule($rule, $target);        }        $rules = array_merge(            $get("../rules"),            $rules        );        $set("../rules", $rules);    }}