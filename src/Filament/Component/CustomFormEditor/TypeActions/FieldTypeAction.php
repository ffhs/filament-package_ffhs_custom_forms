<?phpnamespace Ffhs\FilamentPackageFfhsCustomForms\Filament\Component\CustomFormEditor\TypeActions;use Ffhs\FilamentPackageFfhsCustomForms\CustomFieldType\GenericType\CustomFieldType;use Ffhs\FilamentPackageFfhsCustomForms\Exceptions\NonItemKeyOnTypeActionException;use Ffhs\FilamentPackageFfhsCustomForms\Facades\CustomForms;use Ffhs\FilamentPackageFfhsCustomForms\Traits\CanModifyCustomFormEditorData;use Filament\Forms\Components\Actions\Action;class FieldTypeAction extends Action{    use CanModifyCustomFormEditorData;    protected function getFieldKey(): string    {        return once(function () {            if (!isset($this->getArguments()['item'])) {                throw new NonItemKeyOnTypeActionException('The FieldTypeAction has no item key set');            }            return $this->getArguments()['item'];        });    }    protected function getFieldData(): array    {        return $this->getComponent()->getGetCallback()($this->getFieldKey());    }    protected function getFieldType(): CustomFieldType    {        return once(fn() => CustomForms::getFieldTypeFromRawDate($this->getFieldData(),            $this->getComponent()->getRecord()));    }    protected function resolveDefaultClosureDependencyForEvaluationByName(string $parameterName): array    {        return match ($parameterName) {            'fieldKey' => [$this->getFieldKey()],            'fieldData' => [$this->getFieldData()],            'fieldType' => [$this->getFieldType()],            default => parent::resolveDefaultClosureDependencyForEvaluationByName($parameterName),        };    }}