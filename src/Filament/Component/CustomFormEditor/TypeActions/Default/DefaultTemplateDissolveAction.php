<?phpnamespace Ffhs\FilamentPackageFfhsCustomForms\Filament\Component\CustomFormEditor\TypeActions\Default;use Ffhs\FilamentPackageFfhsCustomForms\CustomFieldType\LayoutType\Types\GroupType;use Ffhs\FilamentPackageFfhsCustomForms\Filament\Component\CustomFormEditor\TypeActions\FieldTypeAction;use Ffhs\FilamentPackageFfhsCustomForms\Models\CustomField;use Ffhs\FilamentPackageFfhsCustomForms\Models\CustomForm;use Ffhs\FilamentPackageFfhsCustomForms\Traits\CanCloneCustomForm;use Ffhs\FilamentPackageFfhsCustomForms\Traits\CanLoadCustomFormEditorData;use Ffhs\FilamentPackageFfhsCustomForms\Traits\CanModifyCustomFormEditorData;use Filament\Forms\Components\Component;use Filament\Forms\Get;use Filament\Forms\Set;use Filament\Support\Colors\Color;class DefaultTemplateDissolveAction extends FieldTypeAction{    use CanModifyCustomFormEditorData;    use CanLoadCustomFormEditorData;    use CanCloneCustomForm;    protected function setUp(): void    {        parent::setUp();        $this->iconButton();        $this->closeModalByClickingAway(false)            ->icon('carbon-sync-settings')            ->color(Color::hex('#de9310'))            ->label(CustomField::__('actions.dissolve.label'))            ->tooltip(CustomField::__('actions.dissolve.tooltip'))            ->requiresConfirmation()            ->modalHeading(function (array $state, array $arguments, CustomForm $record) {                $data = $state[$arguments['item']];                $template = $record->getFormConfiguration()                    ->getAvailableTemplates()                    ->get($data['template_id']);                $name = $template->short_title;                return trans(CustomField::__('actions.dissolve.heading'), ['name' => $name]);            })            ->action($this->dissolve(...));    }    protected function dissolve(        CustomForm $record,        Get $get,        Set $set,        array $state,        array $arguments,        Component $component    ): void {        $key = $arguments['item'];        $templateID = $state[$key]['template_id'];        $template = $record->getFormConfiguration()            ->getAvailableTemplates()            ->get($templateID);        $this->dissolveFields($set, $key, $state, $template, $component, $record);        $this->dissolveRules($set, $get, $template, $record);    }    protected function dissolveFields(        Set $set,        string $templateFieldKey,        array $state,        CustomForm $template,        Component $component,        CustomForm $target    ): void {        $customFields = $state;        $templatePos = $state[$templateFieldKey]['form_position'];        //Get Template Fields        $templateFormData = $this->loadCustomFormEditorData($template);        $templateFields = $templateFormData['custom_fields'];        //CustomFieldAnswerer CustomField id changing is handelt in TemplateFieldType.class on afterEditFieldDelete()        $clearedTemplateFields = array_map(            fn($field) => $this->cloneField($field, $target, true),            $templateFields        );        //Put template fields in an group        $clearedTemplateFields = $this->putFieldsInGroup($clearedTemplateFields, $target);        //Place the new fields there were the template was        $customFields = $this->addMultipleFieldsToEditorData(            $clearedTemplateFields,            $templatePos,            $customFields        );        //Deleting template field        $customFields = $this->removeFieldFromEditorData($templateFieldKey, $customFields);        //Set the fields back in the repeater        $set($component->getStatePath(), $customFields, true);    }    protected function putFieldsInGroup(array $clearedTemplateFields, CustomForm $target): array    {        //Move fields in group        foreach ($clearedTemplateFields as $key => $field) {            $clearedTemplateFields[$key]['form_position'] = $field['form_position'] + 1;            if (!empty($clearedTemplateFields[$key]['layout_end_position'])) {                $clearedTemplateFields[$key]['layout_end_position'] = $field['layout_end_position'] + 1;            }        }        $options = ['column_span' => 10, 'columns' => config('ffhs_custom_forms.default_column_count'),];        $options += GroupType::make()->getDefaultTypeOptionValues();        //Add gorup field        $id = uniqid();        $clearedTemplateFields[$id] = [            'form_position' => 1,            'layout_end_position' => sizeof($clearedTemplateFields) + 1,            'is_active' => true,            'identifier' => $id,            'custom_form_id' => $target->id,            'options' => $options,            'type' => GroupType::identifier(),        ];        return $clearedTemplateFields;    }    protected function dissolveRules(Set $set, Get $get, CustomForm $template, CustomForm $target): void    {        $rules = $this->loadEditorRules($template);        foreach ($rules as $key => $rule) {            $rules[$key] = $this->cloneRule($rule, $target);        }        $rules = array_merge(            $get('../rules'),            $rules        );        $set('../rules', $rules);    }}